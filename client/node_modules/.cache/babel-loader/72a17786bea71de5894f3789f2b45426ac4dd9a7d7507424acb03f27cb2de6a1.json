{"ast":null,"code":"var _jsxFileName = \"/Users/vojtechvitek/Projects/ListApp/client/src/providers/ListOverviewProvider.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useContext } from \"react\";\nimport { UserContext } from \"./UserProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL;\nexport const ListOverviewContext = /*#__PURE__*/createContext();\nfunction ListOverviewProvider({\n  children\n}) {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const {\n    setActiveList,\n    fetchLists\n  } = useContext(UserContext);\n  const createList = async (listName, loggedInUser, guestList) => {\n    console.log(\"Creating list\");\n    try {\n      const response = await fetch(`${API_URL}/list/create`, {\n        method: \"POST\",\n        // Set method to POST\n        headers: {\n          \"Content-Type\": \"application/json\" // Indicate JSON data\n        },\n        body: JSON.stringify({\n          name: listName,\n          // The name value\n          host: loggedInUser,\n          // The host value\n          guests: guestList // The guests array or value\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to create the list.\");\n      }\n      const data = await response.json();\n      console.log(\"List created successfully:\", data);\n\n      // Optionally, you can handle the response further (e.g., set state)\n      return data; // Return the result for further use\n    } catch (err) {\n      console.error(\"Error creating list:\", err.message);\n      setError(err.message); // Handle the error\n    } finally {\n      fetchLists(loggedInUser);\n      setLoading(false); // Stop loading state if you’re using it\n    }\n  };\n  const deleteList = async (loggedInUser, listToDelete) => {\n    console.log(\"Deleting list:\", listToDelete);\n    try {\n      const response = await fetch(`${API_URL}/list/delete/`, {\n        method: \"DELETE\",\n        // Set method to DELETE\n        headers: {\n          \"Content-Type\": \"application/json\" // Optional, usually not required for DELETE\n        },\n        body: JSON.stringify({\n          userId: loggedInUser,\n          // The name value\n          listId: listToDelete // The host value\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to delete the list.\");\n      }\n      const data = await response.json();\n      console.log(\"List deleted successfully:\", data);\n\n      // Optionally, return the data for further use\n      return data;\n    } catch (err) {\n      console.error(\"Error deleting list:\", err.message);\n      setError(err.message); // Handle the error state\n    } finally {\n      setActiveList(\"\");\n      fetchLists(loggedInUser);\n      setLoading(false); // Stop the loading state\n    }\n  };\n  const updateList = async ({\n    listId,\n    loggedInUser,\n    name,\n    guestList,\n    state\n  }) => {\n    console.log(\"Updating list\");\n\n    // Dynamically build the body with only provided fields\n    const requestBody = {\n      userId: loggedInUser,\n      listId,\n      listData: {\n        name: name,\n        guests: guestList,\n        archived: state\n      }\n    };\n    console.log(requestBody);\n    try {\n      const response = await fetch(`${API_URL}/list/delete/`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: name,\n          // The name value\n          host: loggedInUser,\n          // The host value\n          guests: guestList // The guests array or value\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to update the list.\");\n      }\n      const data = await response.json();\n      console.log(\"List updated successfully:\", data);\n      return data;\n    } catch (err) {\n      console.error(\"Error updating list:\", err.message);\n      setError(err.message);\n    } finally {\n      fetchLists(loggedInUser);\n      setLoading(false);\n    }\n  };\n  const value = {\n    createList,\n    deleteList,\n    updateList\n  };\n  return /*#__PURE__*/_jsxDEV(ListOverviewContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n}\n_s(ListOverviewProvider, \"0wghK+zv5T+YlwWi7yg42yVLxX8=\");\n_c = ListOverviewProvider;\nexport default ListOverviewProvider;\nvar _c;\n$RefreshReg$(_c, \"ListOverviewProvider\");","map":{"version":3,"names":["createContext","useState","useContext","UserContext","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_API_URL","ListOverviewContext","ListOverviewProvider","children","_s","loading","setLoading","error","setError","setActiveList","fetchLists","createList","listName","loggedInUser","guestList","console","log","response","fetch","method","headers","body","JSON","stringify","name","host","guests","ok","Error","data","json","err","message","deleteList","listToDelete","userId","listId","updateList","state","requestBody","listData","archived","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vojtechvitek/Projects/ListApp/client/src/providers/ListOverviewProvider.js"],"sourcesContent":["import { createContext, useState, useContext } from \"react\";\nimport { UserContext } from \"./UserProvider\";\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nexport const ListOverviewContext = createContext();\n\nfunction ListOverviewProvider({ children }) {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const { setActiveList, fetchLists } = useContext(UserContext);\n\n  const createList = async (listName, loggedInUser, guestList) => {\n    console.log(\"Creating list\");\n    try {\n      const response = await fetch(`${API_URL}/list/create`, {\n        method: \"POST\", // Set method to POST\n        headers: {\n          \"Content-Type\": \"application/json\", // Indicate JSON data\n        },\n        body: JSON.stringify({\n          name: listName, // The name value\n          host: loggedInUser, // The host value\n          guests: guestList, // The guests array or value\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to create the list.\");\n      }\n\n      const data = await response.json();\n      console.log(\"List created successfully:\", data);\n\n      // Optionally, you can handle the response further (e.g., set state)\n      return data; // Return the result for further use\n    } catch (err) {\n      console.error(\"Error creating list:\", err.message);\n      setError(err.message); // Handle the error\n    } finally {\n      fetchLists(loggedInUser);\n      setLoading(false); // Stop loading state if you’re using it\n    }\n  };\n\n  const deleteList = async (loggedInUser, listToDelete) => {\n    console.log(\"Deleting list:\", listToDelete);\n    try {\n      const response = await fetch(`${API_URL}/list/delete/`, {\n        method: \"DELETE\", // Set method to DELETE\n        headers: {\n          \"Content-Type\": \"application/json\", // Optional, usually not required for DELETE\n        },\n        body: JSON.stringify({\n          userId: loggedInUser, // The name value\n          listId: listToDelete, // The host value\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to delete the list.\");\n      }\n\n      const data = await response.json();\n      console.log(\"List deleted successfully:\", data);\n\n      // Optionally, return the data for further use\n      return data;\n    } catch (err) {\n      console.error(\"Error deleting list:\", err.message);\n      setError(err.message); // Handle the error state\n    } finally {\n      setActiveList(\"\");\n      fetchLists(loggedInUser);\n      setLoading(false); // Stop the loading state\n    }\n  };\n\n  const updateList = async ({\n    listId,\n    loggedInUser,\n    name,\n    guestList,\n    state,\n  }) => {\n    console.log(\"Updating list\");\n\n    // Dynamically build the body with only provided fields\n    const requestBody = {\n      userId: loggedInUser,\n      listId,\n      listData: {\n        name: name,\n        guests: guestList,\n        archived: state,\n      },\n    };\n\n    console.log(requestBody);\n\n    try {\n      const response = await fetch(`${API_URL}/list/delete/`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          name: name, // The name value\n          host: loggedInUser, // The host value\n          guests: guestList, // The guests array or value\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to update the list.\");\n      }\n\n      const data = await response.json();\n      console.log(\"List updated successfully:\", data);\n\n      return data;\n    } catch (err) {\n      console.error(\"Error updating list:\", err.message);\n      setError(err.message);\n    } finally {\n      fetchLists(loggedInUser);\n      setLoading(false);\n    }\n  };\n\n  const value = {\n    createList,\n    deleteList,\n    updateList,\n  };\n\n  return (\n    <ListOverviewContext.Provider value={value}>\n      {children}\n    </ListOverviewContext.Provider>\n  );\n}\n\nexport default ListOverviewProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}