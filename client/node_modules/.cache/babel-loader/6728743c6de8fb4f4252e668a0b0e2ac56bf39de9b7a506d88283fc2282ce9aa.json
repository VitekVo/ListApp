{"ast":null,"code":"var _jsxFileName = \"/Users/vojtechvitek/Projects/ListApp/client/src/providers/ListOverviewProvider.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\nimport listData from \"../data/lists.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ListOverviewContext = /*#__PURE__*/createContext();\nfunction ListOverviewProvider({\n  children\n}) {\n  _s();\n  const [lists, setLists] = useState(listData);\n  const createList = async (name, host, guestList) => {\n    try {\n      const response = await fetch(\"/api/lists\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name,\n          host,\n          guests: guestList,\n          items: [],\n          archived: false\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to create a new list\");\n      }\n      const newList = await response.json();\n\n      // Optional: Update the local state with the new list\n      setLists(prevLists => [...prevLists, newList]);\n    } catch (error) {\n      console.error(\"Error creating the list:\", error.message);\n    }\n  };\n  const deleteList = listId => {\n    setLists(prevLists => prevLists.filter(list => list.id !== listId));\n  };\n  const archiveList = listId => {\n    setLists(prevLists => prevLists.map(list => list.id === listId ? {\n      ...list,\n      archived: !list.archived\n    } : list));\n  };\n  const value = {\n    lists,\n    createList,\n    deleteList,\n    archiveList\n  };\n  return /*#__PURE__*/_jsxDEV(ListOverviewContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(ListOverviewProvider, \"FwtXGHBXsGagUq8OmlBfm/DONgI=\");\n_c = ListOverviewProvider;\nexport default ListOverviewProvider;\nvar _c;\n$RefreshReg$(_c, \"ListOverviewProvider\");","map":{"version":3,"names":["createContext","useState","listData","jsxDEV","_jsxDEV","ListOverviewContext","ListOverviewProvider","children","_s","lists","setLists","createList","name","host","guestList","response","fetch","method","headers","body","JSON","stringify","guests","items","archived","ok","Error","newList","json","prevLists","error","console","message","deleteList","listId","filter","list","id","archiveList","map","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vojtechvitek/Projects/ListApp/client/src/providers/ListOverviewProvider.js"],"sourcesContent":["import { createContext, useState } from \"react\";\n\nimport listData from \"../data/lists.json\";\n\nexport const ListOverviewContext = createContext();\n\nfunction ListOverviewProvider({ children }) {\n  const [lists, setLists] = useState(listData);\n\n  const createList = async (name, host, guestList) => {\n    try {\n      const response = await fetch(\"/api/lists\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          name,\n          host,\n          guests: guestList,\n          items: [],\n          archived: false,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to create a new list\");\n      }\n\n      const newList = await response.json();\n\n      // Optional: Update the local state with the new list\n      setLists((prevLists) => [...prevLists, newList]);\n    } catch (error) {\n      console.error(\"Error creating the list:\", error.message);\n    }\n  };\n\n  const deleteList = (listId) => {\n    setLists((prevLists) => prevLists.filter((list) => list.id !== listId));\n  };\n\n  const archiveList = (listId) => {\n    setLists((prevLists) =>\n      prevLists.map((list) =>\n        list.id === listId ? { ...list, archived: !list.archived } : list\n      )\n    );\n  };\n\n  const value = {\n    lists,\n    createList,\n    deleteList,\n    archiveList,\n  };\n\n  return (\n    <ListOverviewContext.Provider value={value}>\n      {children}\n    </ListOverviewContext.Provider>\n  );\n}\n\nexport default ListOverviewProvider;\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAE/C,OAAOC,QAAQ,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,OAAO,MAAMC,mBAAmB,gBAAGL,aAAa,CAAC,CAAC;AAElD,SAASM,oBAAoBA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAC1C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAACC,QAAQ,CAAC;EAE5C,MAAMS,UAAU,GAAG,MAAAA,CAAOC,IAAI,EAAEC,IAAI,EAAEC,SAAS,KAAK;IAClD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,EAAE;QACzCC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBT,IAAI;UACJC,IAAI;UACJS,MAAM,EAAER,SAAS;UACjBS,KAAK,EAAE,EAAE;UACTC,QAAQ,EAAE;QACZ,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MAEA,MAAMC,OAAO,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;;MAErC;MACAlB,QAAQ,CAAEmB,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAEF,OAAO,CAAC,CAAC;IAClD,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC1D;EACF,CAAC;EAED,MAAMC,UAAU,GAAIC,MAAM,IAAK;IAC7BxB,QAAQ,CAAEmB,SAAS,IAAKA,SAAS,CAACM,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKH,MAAM,CAAC,CAAC;EACzE,CAAC;EAED,MAAMI,WAAW,GAAIJ,MAAM,IAAK;IAC9BxB,QAAQ,CAAEmB,SAAS,IACjBA,SAAS,CAACU,GAAG,CAAEH,IAAI,IACjBA,IAAI,CAACC,EAAE,KAAKH,MAAM,GAAG;MAAE,GAAGE,IAAI;MAAEZ,QAAQ,EAAE,CAACY,IAAI,CAACZ;IAAS,CAAC,GAAGY,IAC/D,CACF,CAAC;EACH,CAAC;EAED,MAAMI,KAAK,GAAG;IACZ/B,KAAK;IACLE,UAAU;IACVsB,UAAU;IACVK;EACF,CAAC;EAED,oBACElC,OAAA,CAACC,mBAAmB,CAACoC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAjC,QAAA,EACxCA;EAAQ;IAAAmC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACmB,CAAC;AAEnC;AAACrC,EAAA,CAxDQF,oBAAoB;AAAAwC,EAAA,GAApBxC,oBAAoB;AA0D7B,eAAeA,oBAAoB;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}